name: Build CleanerCS2 with XMake
on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            config: release
          - os: ubuntu-latest
            platform: linux
            arch: x64
            config: release
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.platform }}-${{ matrix.arch }}

    steps:
      - name: Checkout CleanerCS2
        uses: actions/checkout@v4
        with:
          path: cleaner-cs2
          submodules: recursive

      - name: Checkout HL2SDK-CS2
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/hl2sdk
          ref: 8e3da65bdf33e2dfb04ad57208e85ffc9e93c048
          path: hl2sdk
          submodules: recursive

      - name: Checkout Metamod-Source
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/metamod-source
          ref: master
          path: metamod-source
          submodules: recursive

      - name: Setup MinGW-w64 (Linux)
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential mingw-w64

      - name: Setup XMake
        run: |
          # 直接使用GitHub提供的xmake
          if ("${{ runner.os }}" -eq "Windows") {
            # Windows使用PowerShell直接下载
            Invoke-WebRequest -Uri "https://github.com/xmake-io/xmake/releases/download/v3.0.4/xmake-v3.0.4-win64.zip" -OutFile "xmake.zip"
            Expand-Archive -Path "xmake.zip" -DestinationPath "."
            $env:PATH += ";$pwd"
          } else {
            # Linux使用包管理器
            curl -fsSL https://xmake.io/shget.text | bash
          }

      - name: Show environment
        run: |
          if ("${{ runner.os }}" -eq "Windows") {
            Write-Host "Windows environment"
            Get-Command xmake
          } else {
            echo "Linux environment"
            which xmake
          }

      - name: Configure with XMake
        working-directory: cleaner-cs2
        run: |
          echo "Configuring for ${{ matrix.platform }}-${{ matrix.arch }}"
          
          if ("${{ runner.os }}" -eq "Windows") {
            # Windows平台配置
            xmake f -p windows -a x64 -m release
          } else {
            # Linux平台配置
            xmake f -p linux -a x64 -m release
          }
        shell: powershell

      - name: Build project
        working-directory: cleaner-cs2
        run: |
          echo "Building project..."
          xmake build -v
        shell: powershell

      - name: Verify build success
        working-directory: cleaner-cs2
        run: |
          if ("${{ runner.os }}" -eq "Windows") {
            if (Test-Path "build/windows/x64/release/CleanerCS2-Xmake.dll") {
              echo "✓ DLL build successful"
              Get-ChildItem -Path "build/windows/x64/release" -Force
            } else {
              echo "✗ DLL build failed"
              Get-ChildItem -Path "build/windows/x64/release" -Force
              exit 1
            }
          } else {
            if (Test-Path "build/linux/x86_64/release/libCleanerCS2-Xmake.so") {
              echo "✓ SO build successful"
              ls -la "build/linux/x86_64/release"
            } else {
              echo "✗ SO build failed"
              ls -la "build/linux/x86_64/release"
              exit 1
            }
          }
        shell: powershell

      - name: Create package structure
        working-directory: cleaner-cs2
        run: |
          mkdir -p package
          if ("${{ runner.os }}" -eq "Windows") {
            if (Test-Path "build/windows/x64/release/CleanerCS2-Xmake.dll") {
              cp "build/windows/x64/release/CleanerCS2-Xmake.dll" package/
            }
          } else {
            if (Test-Path "build/linux/x86_64/release/libCleanerCS2-Xmake.so") {
              cp "build/linux/x86_64/release/libCleanerCS2-Xmake.so" package/
            }
          }
        shell: powershell

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: cleaner-cs2-${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cleaner-cs2/package/**
            cleaner-cs2/build/**
          retention-days: 7

      - name: Upload source code
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: cleaner-cs2-source
          path: |
            cleaner-cs2/src/**
            cleaner-cs2/xmake.lua
            cleaner-cs2/README.md
            cleaner-cs2/LICENSE
            cleaner-cs2/package/**
          retention-days: 7
