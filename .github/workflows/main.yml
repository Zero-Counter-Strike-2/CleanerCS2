name: Build CleanerCS2 with XMake
on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            config: release
          - os: ubuntu-latest
            platform: linux
            arch: x64
            config: release
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.platform }}-${{ matrix.arch }}

    env:
      HL2SDKCS2: ${{ github.workspace }}/hl2sdk
      MMSOURCE112: ${{ github.workspace }}/metamod-source

    steps:
      - name: Checkout CleanerCS2
        uses: actions/checkout@v4
        with:
          path: cleaner-cs2
          submodules: recursive

      - name: Checkout HL2SDK-CS2
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/hl2sdk
          ref: 8e3da65bdf33e2dfb04ad57208e85ffc9e93c048
          path: hl2sdk
          submodules: recursive

      - name: Checkout Metamod-Source
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/metamod-source
          ref: master
          path: metamod-source
          submodules: recursive

      - name: Install XMake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest

      - name: Setup build environment
        run: |
          echo "=== Environment Information ==="
          xmake --version
          echo "Runner OS: $env:RUNNER_OS"
          echo "Working directory: $env:PWD"
          echo "HL2SDKCS2 path: $env:HL2SDKCS2"
          echo "MMSOURCE112 path: $env:MMSOURCE112"
          
          # Check if paths exist
          if (Test-Path "$env:HL2SDKCS2") {
            echo "✓ HL2SDK path exists"
            Get-ChildItem -Path "$env:HL2SDKCS2" -Force | Select-Object Name, Length
          } else {
            echo "✗ HL2SDK path does not exist"
            dir "$env:HL2SDKCS2" -ErrorAction SilentlyContinue
          }
          
          if (Test-Path "$env:MMSOURCE112") {
            echo "✓ Metamod-Source path exists"
            Get-ChildItem -Path "$env:MMSOURCE112" -Force | Select-Object Name, Length
          } else {
            echo "✗ Metamod-Source path does not exist"
            dir "$env:MMSOURCE112" -ErrorAction SilentlyContinue
          }

      - name: Show project structure
        working-directory: cleaner-cs2
        run: |
          echo "=== Project Structure ==="
          if (Test-Path "xmake.lua") {
            echo "✓ xmake.lua exists"
            Get-Content xmake.lua | Select-Object -First 10
          } else {
            echo "✗ xmake.lua not found"
            dir -Recurse
          }

      - name: Configure with XMake
        working-directory: cleaner-cs2
        run: |
          echo "=== Configuring XMake ==="
          echo "Configuring for ${{ matrix.platform }}-${{ matrix.arch }}"
          
          # Set timeout to prevent cancellation
          $ErrorActionPreference = "Stop"
          try {
            xmake f -p windows -a x64 -m release
            if ($LASTEXITCODE -ne 0) {
              echo "XMake configure failed with exit code: $LASTEXITCODE"
              exit 1
            }
            echo "XMake configure completed successfully"
          } catch {
            echo "XMake configure error: $_"
            exit 1
          }
        shell: powershell

      - name: Build project
        working-directory: cleaner-cs2
        run: |
          echo "=== Building Project ==="
          $ErrorActionPreference = "Stop"
          try {
            xmake build -v
            if ($LASTEXITCODE -ne 0) {
              echo "Build failed with exit code: $LASTEXITCODE"
              exit 1
            }
            echo "Build completed successfully"
          } catch {
            echo "Build error: $_"
            exit 1
          }
        shell: powershell

      - name: Verify build success
        working-directory: cleaner-cs2
        run: |
          echo "=== Verifying Build ==="
          $ErrorActionPreference = "Stop"
          try {
            if (Test-Path "build/windows/x64/release/CleanerCS2-Xmake.dll") {
              echo "✓ DLL build successful"
              Get-ChildItem -Path "build/windows/x64/release" -Force
              exit 0
            } else {
              echo "✗ DLL build failed"
              if (Test-Path "build/windows/x64/release") {
                Get-ChildItem -Path "build/windows/x64/release" -Force
              }
              exit 1
            }
          } catch {
            echo "Verification error: $_"
            exit 1
          }
        shell: powershell

      - name: Create package structure
        working-directory: cleaner-cs2
        run: |
          echo "=== Creating Package ==="
          New-Item -ItemType Directory -Path "package" -Force
          if (Test-Path "build/windows/x64/release/CleanerCS2-Xmake.dll") {
            Copy-Item -Path "build/windows/x64/release/CleanerCS2-Xmake.dll" -Destination "package/"
            echo "✓ Copied DLL to package"
          }
          Get-ChildItem -Path "package" -Recurse -Force
        shell: powershell

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: cleaner-cs2-${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            cleaner-cs2/package/**
            cleaner-cs2/build/**
          retention-days: 7

      - name: Upload source code
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: cleaner-cs2-source
          path: |
            cleaner-cs2/src/**
            cleaner-cs2/xmake.lua
            cleaner-cs2/README.md
            cleaner-cs2/LICENSE
            cleaner-cs2/package/**
          retention-days: 7

      - name: Final verification
        if: success()
        working-directory: cleaner-cs2
        run: |
          echo "=== Final Verification ==="
          echo "Final package contents:"
          Get-ChildItem -Path "package" -Recurse -Force
          echo "=================================="
        shell: powershell
